analyze gcd_fsm.vhd
elaborate gcd_fsm

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 be6638e5, gcc 9.3.0-10ubuntu2 -fPIC -Os)


-- Executing script file `synth.ys' --

1. Executing GHDL.
Importing module gcd_fsm.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \gcd_fsm

2.1.2. Analyzing design hierarchy..
Top module:  \gcd_fsm
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.
<suppressed ~3 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..
Removed 2 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module gcd_fsm..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd_fsm.
    New ctrl vector for $pmux cell \32: { $auto$ghdl.cc:696:import_module$9 $auto$opt_reduce.cc:134:opt_mux$31 $auto$ghdl.cc:696:import_module$5 }
    New ctrl vector for $pmux cell \34: { $auto$ghdl.cc:696:import_module$9 $auto$opt_reduce.cc:134:opt_mux$33 }
    New ctrl vector for $pmux cell \39: { $auto$ghdl.cc:696:import_module$15 $auto$opt_reduce.cc:134:opt_mux$35 $auto$ghdl.cc:696:import_module$5 }
    New ctrl vector for $pmux cell \41: { $auto$ghdl.cc:696:import_module$15 $auto$opt_reduce.cc:134:opt_mux$37 $auto$ghdl.cc:696:import_module$5 }
  Optimizing cells in module \gcd_fsm.
Performed a total of 4 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd_fsm.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from mux cell gcd_fsm.\17 ($mux).
Removed top 1 bits (of 2) from port B of cell gcd_fsm.\19 ($eq).
Removed top 1 bits (of 2) from wire gcd_fsm.$auto$ghdl.cc:696:import_module$7.

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.10. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module gcd_fsm:
  creating $macc model for \23 ($sub).
  creating $macc model for \24 ($sub).
  creating $alu model for $macc \24.
  creating $alu model for $macc \23.
  creating $alu model for \22 ($lt): merged with \23.
  creating $alu model for \14 ($ne): merged with \23.
  creating $alu cell for \23, \22, \14: $auto$alumacc.cc:485:replace_alu$39
  creating $alu cell for \24: $auto$alumacc.cc:485:replace_alu$52
  created 2 $alu and 0 $macc cells.

2.11. Executing SHARE pass (SAT-based resource sharing).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.
<suppressed ~3 debug messages>

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd_fsm.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.12.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..
Removed 2 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd_fsm.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.12.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.12.16. Finished OPT passes. (There is nothing left to do.)

2.13. Executing FSM pass (extract and optimize FSM).

2.13.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking gcd_fsm.state as FSM state register:
    Circuit seems to be self-resetting.

2.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.14.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.14.5. Finished fast OPT passes.

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.15.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.15.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.15.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.
<suppressed ~7 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.17.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.17.5. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd_fsm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd_fsm.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

2.19.10. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~596 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.
<suppressed ~77 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
<suppressed ~90 debug messages>
Removed a total of 30 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..
Removed 15 unused cells and 270 unused wires.
<suppressed ~16 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\gcd_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 1015 gates and 1182 wires to a netlist network with 165 inputs and 99 outputs.

2.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       77
ABC RESULTS:            ANDNOT cells:      290
ABC RESULTS:               MUX cells:      257
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:       25
ABC RESULTS:               NOT cells:       28
ABC RESULTS:                OR cells:       69
ABC RESULTS:             ORNOT cells:       65
ABC RESULTS:              XNOR cells:       11
ABC RESULTS:               XOR cells:       84
ABC RESULTS:        internal signals:      918
ABC RESULTS:           input signals:      165
ABC RESULTS:          output signals:       99
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.
<suppressed ~12 debug messages>

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.23.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..
Removed 1 unused cells and 530 unused wires.
<suppressed ~84 debug messages>

2.23.5. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.24.1. Analyzing design hierarchy..
Top module:  \gcd_fsm

2.24.2. Analyzing design hierarchy..
Top module:  \gcd_fsm
Removed 0 unused modules.

2.25. Printing statistics.

=== gcd_fsm ===

   Number of wires:                856
   Number of wire bits:           1208
   Number of public wires:          19
   Number of public wire bits:     371
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1002
     $_ANDNOT_                     289
     $_AND_                         75
     $_DFF_PP0_                     66
     $_DFF_P_                       33
     $_MUX_                        257
     $_NAND_                         1
     $_NOR_                         25
     $_NOT_                         27
     $_ORNOT_                       65
     $_OR_                          69
     $_XNOR_                        11
     $_XOR_                         84

2.26. Executing CHECK pass (checking for obvious problems).
checking module gcd_fsm..
found and reported 0 problems.

3. Executing FLATTEN pass (flatten design).

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
No more expansions possible.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gcd_fsm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gcd_fsm.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gcd_fsm'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gcd_fsm..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gcd_fsm.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

6.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\gcd_fsm':
  mapped 66 $_DFF_PN0_ cells to \DFFR_X1 cells.
  mapped 33 $_DFF_P_ cells to \DFF_X1 cells.

7. Executing ABC pass (technology mapping using ABC).

7.1. Extracting gate netlist of module `\gcd_fsm' to `<abc-temp-dir>/input.blif'..
Extracted 969 gates and 1134 wires to a netlist network with 165 inputs and 165 outputs.

7.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/calab/lab/lib/45nm_typ.lib 
ABC: Parsing finished successfully.  Parsing time =     0.15 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/home/calab/lab/lib/45nm_typ.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.18 sec
ABC: Memory =    8.88 MB. Time =     0.18 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:       21
ABC RESULTS:           AND3_X1 cells:        6
ABC RESULTS:           AND4_X1 cells:        1
ABC RESULTS:         AOI211_X1 cells:        4
ABC RESULTS:          AOI21_X1 cells:       93
ABC RESULTS:         AOI221_X1 cells:       45
ABC RESULTS:          AOI22_X1 cells:        9
ABC RESULTS:            INV_X1 cells:      168
ABC RESULTS:           MUX2_X1 cells:       48
ABC RESULTS:          NAND2_X1 cells:       46
ABC RESULTS:          NAND3_X1 cells:        5
ABC RESULTS:          NAND4_X1 cells:        1
ABC RESULTS:           NOR2_X1 cells:       90
ABC RESULTS:           NOR3_X1 cells:        7
ABC RESULTS:           NOR4_X1 cells:        1
ABC RESULTS:         OAI211_X1 cells:        7
ABC RESULTS:          OAI21_X1 cells:      113
ABC RESULTS:         OAI221_X1 cells:        7
ABC RESULTS:          OAI22_X1 cells:        6
ABC RESULTS:            OR2_X1 cells:       21
ABC RESULTS:            OR3_X1 cells:        1
ABC RESULTS:            OR4_X1 cells:        1
ABC RESULTS:          XNOR2_X1 cells:       53
ABC RESULTS:           XOR2_X1 cells:       24
ABC RESULTS:        internal signals:      804
ABC RESULTS:           input signals:      165
ABC RESULTS:          output signals:      165
Removing temp directory.

8. Printing statistics.

=== gcd_fsm ===

   Number of wires:               1964
   Number of wire bits:           2316
   Number of public wires:          19
   Number of public wire bits:     371
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                877
     AND2_X1                        21
     AND3_X1                         6
     AND4_X1                         1
     AOI211_X1                       4
     AOI21_X1                       93
     AOI221_X1                      45
     AOI22_X1                        9
     DFFR_X1                        66
     DFF_X1                         33
     INV_X1                        168
     MUX2_X1                        48
     NAND2_X1                       46
     NAND3_X1                        5
     NAND4_X1                        1
     NOR2_X1                        90
     NOR3_X1                         7
     NOR4_X1                         1
     OAI211_X1                       7
     OAI21_X1                      113
     OAI221_X1                       7
     OAI22_X1                        6
     OR2_X1                         21
     OR3_X1                          1
     OR4_X1                          1
     XNOR2_X1                       53
     XOR2_X1                        24

   Chip area for module '\gcd_fsm': 1319.892000

9. Executing Verilog backend.
Dumping module `\gcd_fsm'.

Warnings: 8 unique messages, 72 total
End of script. Logfile hash: 3dd5c670f8, CPU: user 0.78s system 0.04s, MEM: 37.63 MB peak
Yosys 0.9+2406 (git sha1 be6638e5, gcc 9.3.0-10ubuntu2 -fPIC -Os)
Time spent: 42% 2x abc (0 sec), 7% 1x dfflibmap (0 sec), ...
OpenSTA 2.1.0 00d0da6d5a Copyright (c) 2019, Parallax Software, Inc.
License GPLv3: GNU GPL version 3 <http://gnu.org/licenses/gpl.html>

This is free software, and you are free to change and redistribute it
under certain conditions; type `show_copying' for details. 
This program comes with ABSOLUTELY NO WARRANTY; for details type `show_warranty'.
Startpoint: _2723_ (rising edge-triggered flip-flop clocked by clk)
Endpoint: _2723_ (rising edge-triggered flip-flop clocked by clk)
Path Group: clk
Path Type: min

  Delay    Time   Description
---------------------------------------------------------
   0.00    0.00   clock clk (rise edge)
   0.00    0.00   clock network delay (ideal)
   0.00    0.00 ^ _2723_/CK (DFF_X1)
   0.08    0.08 v _2723_/Q (DFF_X1)
   0.01    0.09 ^ _1986_/ZN (INV_X1)
   0.01    0.11 v _2624_/ZN (AOI21_X1)
   0.00    0.11 v _2723_/D (DFF_X1)
           0.11   data arrival time

   0.00    0.00   clock clk (rise edge)
   0.00    0.00   clock network delay (ideal)
   0.00    0.00   clock reconvergence pessimism
           0.00 ^ _2723_/CK (DFF_X1)
   0.00    0.00   library hold time
           0.00   data required time
---------------------------------------------------------
           0.00   data required time
          -0.11   data arrival time
---------------------------------------------------------
           0.10   slack (MET)


Startpoint: _2791_ (rising edge-triggered flip-flop clocked by clk)
Endpoint: _2788_ (rising edge-triggered flip-flop clocked by clk)
Path Group: clk
Path Type: max

  Delay    Time   Description
---------------------------------------------------------
   0.00    0.00   clock clk (rise edge)
   0.00    0.00   clock network delay (ideal)
   0.00    0.00 ^ _2791_/CK (DFFR_X1)
   0.13    0.13 ^ _2791_/Q (DFFR_X1)
   0.05    0.18 ^ _2027_/ZN (XNOR2_X1)
   0.03    0.21 v _2129_/ZN (OAI21_X1)
   0.04    0.25 ^ _2131_/ZN (AOI21_X1)
   0.03    0.28 v _2133_/ZN (OAI21_X1)
   0.05    0.33 ^ _2134_/ZN (AOI21_X1)
   0.02    0.35 v _2136_/ZN (NOR3_X1)
   0.09    0.43 v _2138_/ZN (OR3_X1)
   0.02    0.46 ^ _2140_/ZN (NAND3_X1)
   0.03    0.49 v _2142_/ZN (OAI211_X1)
   0.04    0.53 ^ _2150_/ZN (AOI21_X1)
   0.04    0.57 ^ _2159_/ZN (OR2_X1)
   0.03    0.60 v _2166_/ZN (AOI221_X1)
   0.90    1.50 ^ _2167_/ZN (NOR2_X1)
   0.06    1.56 v _2403_/ZN (OAI211_X1)
   0.06    1.62 ^ _2407_/ZN (OAI211_X1)
   0.00    1.62 ^ _2788_/D (DFFR_X1)
           1.62   data arrival time

  10.00   10.00   clock clk (rise edge)
   0.00   10.00   clock network delay (ideal)
   0.00   10.00   clock reconvergence pessimism
          10.00 ^ _2788_/CK (DFFR_X1)
  -0.04    9.96   library setup time
           9.96   data required time
---------------------------------------------------------
           9.96   data required time
          -1.62   data arrival time
---------------------------------------------------------
           8.34   slack (MET)


Group                  Internal  Switching    Leakage      Total
                          Power      Power      Power      Power
----------------------------------------------------------------
Sequential             4.42e-05   4.77e-06   6.88e-06   5.58e-05  50.2%
Combinational          1.82e-05   1.78e-05   1.93e-05   5.53e-05  49.8%
Macro                  0.00e+00   0.00e+00   0.00e+00   0.00e+00   0.0%
Pad                    0.00e+00   0.00e+00   0.00e+00   0.00e+00   0.0%
----------------------------------------------------------------
Total                  6.24e-05   2.25e-05   2.61e-05   1.11e-04 100.0%
                          56.2%      20.3%      23.5%
copy []-> work
